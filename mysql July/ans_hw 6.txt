1.Write a MySQL query to find the addresses (location_id, street_address, city, state_province, country_name) of all the departments.



-- This SQL query selects specific columns from the 'locations' table after performing a natural join with the 'countries' table.

SELECT 
    location_id, 
    street_address, 
    city,
    state_province, 
    country_name 
FROM 
    locations 
natural JOIN 
    countries ; 

-- Performing a natural join with the 'countries' table based on any common columns.



2. Write a MySQL query to find the name (first_name, last name), department ID and department	 name of all the employees.

-- This SQL query selects specific columns from the 'employees' table after performing an inner join with the 'departments' table using the 'department_id' column.

SELECT 
    first_name,last_name, department_id,department_name 
FROM 
    employees 
JOIN 
    departments 
using (department_id);


-- Performing an inner join using the 'department_id' column, which is common in both tables.


3. Write a MySQL query to find the name (first_name, last_name), job_id, department ID and name of the employees who works in munich.

-- This SQL query selects specific columns from the 'employees' and 'departments' tables, as well as the 'locations' table, to retrieve information about employees in the munich city.

SELECT 
    e.first_name, 
    e.last_name, 
    e.job_id, 
    e.department_id, 
    d.department_name, 
    l.city
from
    employees e 
JOIN 
    departments d 
ON 
    (e.department_id = d.department_id) 
join
    locations l ON
    (d.location_id = l.location_id)
WHERE 
    (l.city) = 'munich'; 


4. Write a MySQL query to find the employee id, name (last_name) along with their manager_id and name (last_name).

-- This SQL query selects specific columns from the 'employees' table, twice aliased as 'e' and 'm', to retrieve information about employees and their managers.

SELECT 
    e.employee_id 'Emp_Id',
    e.last_name 'Employee', 
    m.employee_id 'Mgr_Id',
    m.last_name 'Manager'
FROM 
    employees e 
JOIN 
    employees m 
ON 
    (e.manager_id = m.employee_id);

 -- Performing a join between 'employees' and itself based on the 'manager_id' column to associate employees with their managers.



5. Write a MySQL query to find the name (first_name, last_name) and hire date of the employees who was hired after 'Jones'.

-- This SQL query selects specific columns from the 'employees' table to retrieve information about employees hired after an employee with the last name 'Jones'.

SELECT 
    e.first_name, 
    e.last_name, 
    e.hire_date
FROM 
    employees e 
JOIN 
    employees d
ON 
    d.hire_date < e.hire_date where d.last_name='jones';

 (where can be replace with and)

     


6. Write a MySQL query to get the department name and number of employees in the department.

-- This SQL query retrieves the count of employees in each department, along with the department names, from the 'departments' and 'employees' tables.

SELECT 
    department_name AS 'Department Name', 
    COUNT(*) AS 'No of Employees' 
FROM 
    departments d
INNER JOIN 
    employees e
ON 
    e.department_id = d.department_id 
GROUP BY 
    d.department_id, department_name 
ORDER BY 
    department_name; 


7. Write a MySQL query to find the employee ID, job title, number of days between ending date and starting date for all jobs in department 90.

-- This SQL query retrieves specific columns from the 'job_history' table and calculates the duration of each job in days for employees in the specified department.

SELECT 
    employee_id, 
    job_title,
    end_date - start_date AS Days 
FROM 
    job_history 
NATURAL JOIN 
    jobs 
WHERE 
    department_id = 90; 


8. Write a MySQL query to display the department ID and name and first name of manager.

-- This SQL query retrieves specific columns from the 'departments' and 'employees' tables to get information about department managers.

SELECT 
    d.department_id, 
    d.department_name, 
    d.manager_id, 
    e.first_name 
FROM 
    departments d 
INNER JOIN 
    employees e 
ON 
    (d.manager_id = e.employee_id); 


9. Write a MySQL query to display the department name, manager name, and city.

-- This SQL query retrieves specific columns from the 'departments', 'employees', and 'locations' tables to get information about department managers and their corresponding locations.

SELECT 
    d.department_name, 
    e.first_name, 
    l.city
FROM 
    departments d 
JOIN 
    employees e 
ON 
    (d.manager_id = e.employee_id) 
JOIN 
    locations l USING (location_id); 

-- Performing a join with the 'locations' table based on the 'location_id' column.



10. Write a MySQL query to display the job title and average salary of employees.

-- This SQL query calculates the average salary for each job title by joining the 'employees' and 'jobs' tables.

SELECT 
    job_title, 
    AVG(salary) 
FROM 
    employees 
NATURAL JOIN 
    jobs 
GROUP BY 
    job_title; 


((((((((((((((SELECT 
    first_name,job_title,salary
FROM 
    employees 
NATURAL JOIN 
    jobs 
; )))))))))    understanding perpose

11. Write a MySQL query to display job title, employee name, and the difference between salary of the employee and minimum salary for the job.

-- This SQL query selects specific columns from the 'employees' and 'jobs' tables and calculates the difference between each employee's salary and the minimum salary for their job title.

SELECT 
    job_title, 
    first_name, 
    salary - min_salary AS 'Salary - Min_Salary' 
FROM 
    employees
NATURAL JOIN 
    jobs; 


12. Write a MySQL query to display the job history that were done by any employee who is currently drawing more than 10000 of salary.

-- This SQL query retrieves all columns from the 'job_history' table for employees whose salary is greater than 10000.

SELECT 
    jh.* 
FROM 
    job_history jh 
JOIN 
    employees e 
ON 
    (jh.employee_id = e.employee_id) 
WHERE 
    salary > 10000; 
-- Filtering the result to include only records where the salary is greater than 10000.


13. Write a MySQL query to display department name, name (first_name, last_name), hire date, salary of the manager for all managers whose experience is more than 15 years.


How to find second highest employee:
1)select * from (select id,sales_rep,region,sales_amount,rank() over (partition by region order by sales_amount desc) as rank_1 from sales) as table1 where rank_1=1;
2)select * from (select id,sales_rep,region,sales_amount,rank() over (partition by region order by sales_amount desc) as rank_1 from sales) as table1 where rank_1=2;