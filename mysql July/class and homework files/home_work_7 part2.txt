
26. Select all customers with a rating above 200.00.
select * from customers
where rating>200;
27. Count the number of salespeople currently listing orders in the Orders table.
SELECT COUNT(DISTINCT snum) AS num_salespeople
FROM orders;

28. Write a query that produces all customers serviced by salespeople with a commission above 
12%. Output the customer’s name and the salesperson’s rate of commission.
SELECT c.cname AS customer_name, s.commission_rate AS salesperson_commission
FROM customers c
JOIN salespeople s ON c.snum = s.snum
WHERE s.comm > 0.12;

Step 1: Identifies all orders and associates them with salespeople, showing the salesperson details for each order.
SELECT o.cnum, o.snum, s.sname, s.comm
FROM orders o
JOIN salespeople s ON o.snum = s.snum;

Step 2: Adds customer names to the result set from Step 1, providing a complete view of customers, their orders, and the associated salespeople.
Step 3: Filters the result to include only those salespeople who have a commission rate greater than 12%, showing relevant customer names and their respective salesperson’s commission rate.




29. Find salespeople who have multiple customers.
SELECT s.snum, s.sname
FROM salespeople s
JOIN customers c ON s.snum = c.snum
GROUP BY s.snum, s.sname
HAVING COUNT(c.cnum) > 1;


30. Find salespeople with customers located in their city.
SELECT DISTINCT s.snum, s.sname
FROM salespeople s
JOIN customers c ON s.snum = c.snum
WHERE s.city = c.city;

31. Find all salespeople whose name starts with ‘P’ and the fourth character is ‘l’.
SELECT *
FROM salespeople
WHERE sname LIKE 'P__l%';

32. Write a query that uses a subquery to obtain all orders for the customer named Cisneros. 
Assume you do not know his customer number.
SELECT o.onum, o.amt, o.odate
FROM orders o
WHERE o.cnum = (
    SELECT c.cnum
    FROM customers c
    WHERE c.cname = 'Cisneros'
);

33. Find the largest orders for Serres and Rifkin.
SELECT o.onum, o.amt, o.odate, s.sname
FROM orders o
JOIN salespeople s ON o.snum = s.snum
WHERE s.sname IN ('Serres', 'Rifkin')
  AND o.amt = (
      SELECT MAX(o2.amt)
      FROM orders o2
      JOIN salespeople s2 ON o2.snum = s2.snum
      WHERE s2.sname = s.sname
  ); (The sname is taken into consideration n the last instance)

34. Extract the Salespeople table in the following order : SNUM, SNAME, COMMISSION, CITY.
select snum,sname,comm as commission,city from salespeople;

35. Select all customers whose names fall in between ‘A’ and ‘G’ alphabetical range.
36. Select all the possible combinations of customers that you can assign.
37. Select all orders that are greater than the average for October 4.
38. Write a select command using a corelated subquery that selects the names and numbers of all 
customers with ratings equal to the maximum for their city.
select c.cname,c.cnum from customers c
where c.rating=(select max(c2.rating) from customers c2 where c2.city=c.city);
39. Write a query that totals the orders for each day and places the results in descending order.
select odate,sum(amt) from orders 
grouo by odate 
order by sum(amt) desc;

40. Write a select command that produces the rating followed by the name of each customer in 
San Jose.
select rating,cname from customers
where city="San Jose";

41. Find all orders with amounts smaller than any amount for a customer in San Jose.
42. Find all orders with above average amounts for their customers.
43. Write a query that selects the highest rating in each city.
*44. Write a query that calculates the amount of the salesperson’s commission on each order by a 
customer with a rating above 100.00.
SELECT o.onum AS order_number,
       o.amt AS order_amount,
       s.sname AS salesperson_name,
       s.comm AS commission_rate,
       o.amt * s.comm AS commission_amount
FROM orders o
JOIN customers c ON o.cnum = c.cnum
JOIN salespeople s ON o.snum = s.snum
WHERE c.rating > 100.00;

45. Count the customers with ratings above San Jose’s average.
SELECT COUNT(*) AS customer_count_above_avg
FROM customers
WHERE rating > (
    SELECT AVG(rating)
    FROM customers
    WHERE city = 'San Jose'
);

46. Write a query that produces all pairs of salespeople with themselves as well as duplicate rows 
with the order reversed.
SELECT s1.snum AS salesperson1_id,
       s1.sname AS salesperson1_name,
       s2.snum AS salesperson2_id,
       s2.sname AS salesperson2_name
FROM salespeople s1
CROSS JOIN salespeople s2
ORDER BY s1.snum, s2.snum;

47. Find all salespeople that are located in either Barcelona or London.
SELECT snum AS salesperson_id,
       sname AS salesperson_name,
       city AS salesperson_city,
       comm AS commission_rate
FROM salespeople
WHERE city IN ('Barcelona', 'London');

48. Find all salespeople with only one customer.
SELECT s.snum AS salesperson_id,
       s.sname AS salesperson_name,
       s.city AS salesperson_city,
       s.comm AS commission_rate
FROM salespeople s
WHERE EXISTS (
    SELECT 1
    FROM customers c
    WHERE c.snum = s.snum
    GROUP BY c.snum
    HAVING COUNT(c.cnum) = 1
);

49. Write a query that joins the Customer table to itself to find all pairs of customers served by a 
single salesperson.
SELECT c1.cnum AS customer1_id,
       c1.cname AS customer1_name,
       c2.cnum AS customer2_id,
       c2.cname AS customer2_name,
       c1.snum AS salesperson_id
FROM customers c1
JOIN customers c2
ON c1.snum = c2.snum
AND c1.cnum < c2.cnum;


Customer1_id	customer1_name	customer2_id	customer2_name	salesperson_id
2001	Hoffman	2005	Clemens	1001
2003	Liu	2004	Grass	1002
Why Only One Pair Appears
Condition Logic: The condition c1.cnum < c2.cnum ensures that only one combination of each pair is included in the results. 
This avoids listing both (2001, 2005) and (2005, 2001) and prevents customers from being paired with themselves.
50. Write a query that will give you all orders for more than $1000.00
select * from orders
where amt>1000;

51. Write a query that lists each order number followed by the name of the customer who made 
that order.
select o.onum,c.cname from orders o
join customers c on o.cnum=c.cnum;

*52. Write 2 queries that select all salespeople (by name and number) who have customers in their 
cities who they do not service, one using a join and one a corelated subquery. Which solution 
is more elegant?

53. Write a query that selects all customers whose ratings are equal to or greater than ANY (in the 
SQL sense) of Serres’?
select * from customers
where rating>=any(
select o.amt from orders o
join salespeople s on s.snum=s.snum
where s.sname="Serres");
54. Write 2 queries that will produce all orders taken on October 3 or October 4.
select * from orders
where odate in"1996-10-03" and "1996-10-04";
55. Write a query that produces all pairs of orders by a given customer. Name that customer and 
eliminate duplicates.

1st step:
SELECT * 
FROM orders 
WHERE cnum = 2001;
This result shows that customer 2001 has three orders: 3003, 3008, and 3011
This condition ensures that each pair of orders is listed only once. For example, if o1.onum is 3003 and o2.onum is 3008, then 3003 comes before 3008 and this pair will be included.
The reverse pair (3008, 3003) is not included to avoid duplicates.
When the result shows 3003 in multiple rows, it’s because 3003 can be paired with different other orders:
The result of the above query will be all unique pairs of orders for customer 2001:

Result:

Order1	Order2
3003	3008
3003	3011
3008	3011

Duplicates within the same pair: This is not an issue here since each pair is unique.
Reversed pairs: We want to ensure that each combination is listed only once and not repeated in reverse.

select o1.onum as order 1,o2.onum as order 2
from orders o1
join orders o2
on o1.cnum=o2.cnum
and o1.onum<o2.onum
join customers c on o1.cnum=c.cnum
where c.cnum=2001;

56. Find only those customers whose ratings are higher than every customer in Rome.
57. Write a query on the Customers table whose output will exclude all customers with a rating <= 
100.00, unless they are located in Rome.
select * from customers
where rating>100 or city="Rome";
58. Find all rows from the Customers table for which the salesperson number is 1001.
select * from customers
where snum=1001;

59. Find the total amount in Orders for each salesperson for whom this total is greater than the 
amount of the largest order in the table.

60. Write a query that selects all orders save those with zeroes or NULLs in the amount field.
61. Produce all combinations of salespeople and customer names such that the former precedes 
the latter alphabetically, and the latter has a rating of less than 200.
62. List all Salespeople’s names and the Commission they have earned.
63. Write a query that produces the names and cities of all customers with the same rating as 
Hoffman. Write the query using Hoffman’s CNUM rather than his rating, so that it would still be 
usable if his rating changed.
select cname,city from customers c
where rating=(select rating from customers 
where cnum=(select cnum from customers where cname="Hoffman"));

64. Find all salespeople for whom there are customers that follow them in alphabetical order. 
SELECT DISTINCT s.sname AS salesperson_name
FROM salespeople s
JOIN customers c on s.snum=c.snum
where s.sname<c.cname;

65. Write a query that produces the names and ratings of all customers of all who have above average orders.
SELECT c.cname, c.rating
FROM Customers c
JOIN Orders o ON c.cnum = o.cnum
GROUP BY c.cnum, c.cname, c.rating
HAVING AVG(o.amt) > (
    SELECT AVG(amt)
    FROM Orders
);
HAVING AVG(o.amt) > (SELECT AVG(amt) FROM Orders) filters the customers to include only those whose average order amount is greater than the overall average order amount.
The subquery (SELECT AVG(amt) FROM Orders) calculates the overall average order amount.
Each unique combination of cnum, cname, and rating will form a separate group.

66. Find the SUM of all purchases from the Orders table.
select sum(amt) as total_purchases from orders;

67. Write a SELECT command that produces the order number, amount and date for all rows in 
the order table.
select o.onum as order_number,o.amt as amount,o.odate as date from orders;

68. Count the number of nonNULL rating fields in the Customers table (including repeats).
SELECT COUNT(rating) AS NonNullRatingsCount
FROM Customers
WHERE rating IS NOT NULL;
(in this case it will not count not null)

69.Write a query that gives the names of both the salesperson and the customer for each order 
after the order number. 
SELECT o.onum AS order_number,
       c.cname AS customer_name,
       s.sname AS salesperson_name
FROM orders o
JOIN customers c ON o.cnum = c.cnum
JOIN salespeople s ON o.snum = s.snum;


SELECT Clause:

Choose o.onum for the order number.
Choose c.cname for the customer’s name.
Choose s.sname for the salesperson’s name.
FROM Clause:

Start from the orders table.
JOIN Clauses:

Join the customers table on cnum to get the customer’s name.
Join the salespeople table on snum to get the salesperson’s name.
WHERE Clause:

Not needed in this case because there are no specific filters.

70. List the commissions of all salespeople servicing customers in London.
SELECT DISTINCT s.sname, s.comm
FROM Salespeople s
JOIN Customers c ON s.snum = c.snum
WHERE c.city = 'London';


