1. List all the columns of the Salespeople table.

2. List all customers with a rating of 100.
3. Find all records in the Customer table with NULL values in the city column.
select * from customers
where city is null;
4. Find the largest order taken by each salesperson on each date.
select o.snum as salesperson_id, o.odate as order_date,max(o.amt) as largest_order_amount
from orders
order by o.snum,o.odate;
5. Arrange the Orders table by descending customer number.
6. Find which salespeople currently have orders in the Orders table.
select distinct snum from orders;

7. List names of all customers matched with the salespeople serving them.
select cname from customers c
join salespeople s
on c.snum=s.snum;
8. Find the names and numbers of all salespeople who had more than one customer.
SELECT s.snum, s.sname
FROM salespeople s
JOIN customers c ON s.snum = c.snum
GROUP BY s.snum, s.sname
HAVING COUNT(c.cnum) > 1;

9. Count the orders of each of the salespeople and output the results in descending order.
SELECT s.snum, s.sname, COUNT(o.onum) AS order_count
FROM salespeople s
LEFT JOIN orders o ON s.snum = o.snum
GROUP BY s.snum, s.sname
ORDER BY order_count DESC;

10. List the Customer table if and only if one or more of the customers in the Customer table are 
located in San Jose.
select * from customers
where exists(select 1 from customers where city="San Jose");
11. Match salespeople to customers according to what city they lived in. 
select s.snum as salesperson_number,s.sname as salesperson_name,c.cnum as customer_number,c.cname as customer_name,c.city as customer_city
from salespeople as s join customers c 
on s.snum=c.snum
where c.city=s.city;
12. Find the largest order taken by each salesperson.
SELECT o.snum AS salesperson_number, s.sname AS salesperson_name, MAX(o.amt) AS largest_order
FROM orders o
JOIN salespeople s ON o.snum = s.snum
GROUP BY o.snum, s.sname;

13. Find customers in San Jose who have a rating above 200.
select * from customers
where city="San Jose" and rating>200;
14. List the names and commissions of all salespeople in London.
SELECT s.sname AS salesperson_name, s.comm AS commission
FROM salespeople s
WHERE s.city = 'London';

15. List all the orders of salesperson Motika from the Orders table.
select o.onum from orders o join salespeople s
on o.snum=s.snum
where s.sname="Motika";

16. Find all customers with orders on October 3.
select c.cnum,c.cname from customers c join orders o on c.cnum=o.cnum
where odate="1996-10-03";


17. Give the sums of the amounts from the Orders table, grouped by date, eliminating all those 
dates where the SUM was not at least 2000.00 above the MAX amount.
SELECT 
    o.odate AS order_date,
    SUM(o.amt) AS total_amount
FROM 
    orders o
GROUP BY 
    o.odate
HAVING 
    SUM(o.amt) >= MAX(o.amt) + 2000;




18. Select all orders that had amounts that were greater than at least one of the orders from 
October 6.
select * from orders 
where amt> any(select amt from orders where odate='1996-10-06'); 
(just one 6th october is taken into consideration here)

19. Write a query that uses the EXISTS operator to extract all salespeople who have customers 
with a rating of 300.
select s.sname from salespeople s
where exists(select 1 from customers c where c.rating=300 and c.snum=s.snum);


20. Find all pairs of customers having the same rating.
select * from customers c join customers u on c.rating=u.rating;
SELECT c1.cnum AS customer1, c1.cname AS name1, c2.cnum AS customer2, c2.cname AS name2, c1.rating as customer1rating
FROM customers c1
JOIN customers c2
ON c1.rating = c2.rating
AND c1.cnum < c2.cnum;


Avoid Duplicates:

When you perform a self-join on the customers table to find pairs of customers with the same rating, you will naturally get each pair twice. For example, if customers 1001 and 1002 have the same rating, you'll get two results: one where 1001 is paired with 1002 and another where 1002 is paired with 1001.
By using c1.cnum < c2.cnum, you ensure that you only get one version of each pair. 
The condition forces the query to list the pair in a consistent order: always the customer with a smaller number (c1.cnum) comes first.
Join cnum = 1001 with:

cnum = 1002 (since 1001 < 1002)
cnum = 1004 (since 1001 < 1004)
Join cnum = 1002 with:

cnum = 1004 (since 1002 < 1004)
Join cnum = 1004 with:

No pairs since 1004 is the highest cnum for this rating.

21. Find all customers whose CNUM is 1000 above the SNUM of Serres.
SELECT c.*
FROM customers c
JOIN salespeople s ON c.snum = s.snum
WHERE s.sname = 'Serres'
  AND c.cnum = s.snum + 1000;

22. Give the salespeopleâ€™s commissions as percentages instead of decimal numbers.
SELECT s.comm * 100 AS commission_percentage
FROM salespeople s;

23. Find the largest order taken by each salesperson on each date, eliminating those MAX orders.
SELECT o.onum,
       o.amt,
       o.odate,
       o.cnum,
       o.snum
FROM orders o
WHERE o.amt < (
    SELECT MAX(o2.amt)
    FROM orders o2
    WHERE o2.snum = o.snum
    AND o2.odate = o.odate
);
The WHERE clause in the outer query then checks if the amt of the current row (o.amt) is less than this maximum amount.
Orders with the maximum amount are excluded from the result and the other is shown.
just one row is the answer.

Examples:
For the row with onum 1, the subquery will find the maximum amt for snum 10 and odate 2024-08-01, which is 200. Since 100 is less than 200, this row is included in the result.
For the row with onum 2, the maximum amt is 200. Since 150 is less than 200, this row is included in the result.
For the row with onum 3, the maximum amt is 200. Since 200 is not less than 200, this row is excluded from the result.
For the row with onum 4, the subquery will find the maximum amt for snum 20 and odate 2024-08-01, which is 75. Since 50 is less than 75, this row is included in the result.
For the row with onum 5, the maximum amt is 75. Since 75 is not less than 75, this row is excluded from the result.

24. List the largest orders for October 3, for each salesperson.
SELECT o.onum,
       o.amt,
       o.odate,
       o.cnum,
       o.snum
FROM orders o
WHERE o.odate = '1996-10-03'  
AND o.amt = (
    SELECT MAX(o2.amt)
    FROM orders o2
    WHERE o2.snum = o.snum
    AND o2.odate = o.odate
);

25. Find all customers located in cities where Serres (SNUM 1002) has customers.
SELECT DISTINCT c1.cnum,
                c1.cname,
                c1.city,
                c1.rating
FROM customers c1
WHERE c1.city IN (
    SELECT DISTINCT c.city
    FROM customers c
    JOIN orders o ON c.cnum = o.cnum
    WHERE o.snum = 1002
);

