create table Employees(employee_id int, employee_name varchar(20), department_id int);
create table Departments(department_id int, department_name varchar(20));


-- Insert sample data into Employees table
INSERT INTO Employees (employee_id, employee_name, department_id) VALUES
(1, 'John', 1),
(2, 'Alice', 1),
(3, 'Bob', 2),
(4, 'Emma', 2),
(5, 'Charlie', 1);

-- Insert sample data into Departments table
INSERT INTO Departments (department_id, department_name) VALUES
(1, 'IT'),
(2, 'HR');

insert into departments values(3,"Sales");


insert into departments values(4,"Non-IT");


insert into employees values(6,"Dinesh",5);


insert into employees values(7,"Sameer",6);


insert into employees values(8,"Nessan",6);


insert into employees values(9,"Thilagan",7);





if required add some more rows to the table 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


INNER JOIN:

Retrieve the names of employees along with the names of their departments.

->
SELECT E.employee_name, D.department_name
FROM Employees E INNER JOIN Departments D 
ON E.department_id = D.department_id;
---------------------------------------------------------------------
select employee_name as emp_name,department_name as dept_name from employees e join departments d on e.department_id=d.department_id;
+----------+-----------+
| emp_name | dept_name |
+----------+-----------+
| John     | IT        |
| Alice    | IT        |
| Bob      | HR        |
| Emma     | HR        |
| Charlie  | IT        |
+----------+-----------+

LEFT JOIN:
2. List all employees and their departments, including employees who are not assigned to any department.


SELECT Employees.employee_name, Departments.department_name
FROM Employees
LEFT JOIN Departments ON Employees.department_id = Departments.department_id;

If an employee's department_id does not have a corresponding entry in the departments table, 
the result will include NULL for the department_name of that employee.
___________________________________________________________________
select employee_name as emp_name,department_name as dept_name from employees e left join departments d on e.department_id=d.department_id;
+----------+-----------+
| emp_name | dept_name |
+----------+-----------+
| John     | IT        |
| Alice    | IT        |
| Bob      | HR        |
| Emma     | HR        |
| Charlie  | IT        |
| Dinesh   | NULL      |
| Sameer   | NULL      |
| Nessan   | NULL      |
| Thilagan | NULL      |
+----------+-----------+


RIGHT JOIN:
3. Display all departments and the names of employees in each department, including departments with no employees.


SELECT Employees.employee_name, Departments.department_name
FROM Employees
RIGHT JOIN Departments ON Employees.department_id = Departments.department_id;

select employee_name as emp_name,department_name as dept_name from employees e right join departments d on e.department_id=d.department_id;
+----------+-----------+
| emp_name | dept_name |
+----------+-----------+
| Charlie  | IT        |
| Alice    | IT        |
| John     | IT        |
| Emma     | HR        |
| Bob      | HR        |
| NULL     | Sales     |
| NULL     | Non-IT    |
+----------+-----------+
7 rows in set (0.00 sec)



FULL JOIN:
4. List all employees along with their departments, and display all departments along with the names of employees in each department, showing all possible combinations.


SELECT e.employee_name, d.department_name
FROM employees as e
full join departments as d 
ON e.department_id =d.department_id; (no full join query in mysql)


CROSS JOIN:
5. Retrieve the product of employees and departments, showing all possible combinations of employees and departments.

SELECT Employees.employee_name, Departments.department_name
FROM Employees
CROSS JOIN Departments;


6.Retrieve the names of employees along with their department names, but only for employees who are assigned to a department.

SELECT e.employee_name, d.department_name
FROM Employees e
INNER JOIN Departments d ON e.department_id = d.department_id;


7.List the IDs and names of employees who work in the 'IT' department.


SELECT e.employee_id, e.employee_name
FROM Employees e
INNER JOIN Departments d ON e.department_id = d.department_id
WHERE d.department_name = 'IT';
----------------------------------------------------------------------

mysql> SELECT e.employee_name, d.department_name
    -> FROM Employees e
    -> INNER JOIN Departments d ON e.department_id = d.department_id where department_name="Hr";
+---------------+-----------------+
| employee_name | department_name |
+---------------+-----------------+
| Bob           | HR              |
| Emma          | HR              |
+---------------+-----------------+
2 rows in set (0.01 sec)

mysql> SELECT e.employee_name, d.department_name
    -> FROM Employees e
    -> INNER JOIN Departments d ON e.department_id = d.department_id where department_name="It";
+---------------+-----------------+
| employee_name | department_name |
+---------------+-----------------+
| John          | IT              |
| Alice         | IT              |
| Charlie       | IT              |
+---------------+-----------------+




8.Display the names of employees along with their department names, ordered by department name in ascending order. 
SELECT e.employee_name, d.department_name
FROM Employees e
INNER JOIN Departments d ON e.department_id = d.department_id
ORDER BY d.department_name ASC;



















SELECT e.employee_name, d.department_name
FROM Employees e
INNER JOIN Departments d ON e.department_id = d.department_id
ORDER BY department_name; you can mention table here or not answer will print


=================================================================

mysql> SELECT e.employee_name, d.department_name
    -> FROM Employees e
    -> INNER JOIN Departments d ON e.department_id = d.department_id
    -> ORDER BY d.department_name desc;
+---------------+-----------------+
| employee_name | department_name |
+---------------+-----------------+
| John          | IT              |
| Alice         | IT              |
| Charlie       | IT              |
| Bob           | HR              |
| Emma          | HR              |
+---------------+-----------------+
5 rows in set (0.00 sec)

mysql> SELECT e.employee_name, d.department_name
    -> FROM Employees e
    -> INNER JOIN Departments d ON e.department_id = d.department_id
    -> ORDER BY e.employee_name ;
+---------------+-----------------+
| employee_name | department_name |
+---------------+-----------------+
| Alice         | IT              |
| Bob           | HR              |
| Charlie       | IT              |
| Emma          | HR              |
| John          | IT              |
+---------------+-----------------+
5 rows in set (0.00 sec)

====================================================================
9.Retrieve the names of employees along with their department names, but exclude employees who are not assigned to any department.


SELECT e.employee_name, d.department_name
FROM Employees e
INNER JOIN Departments d ON e.department_id = d.department_id
WHERE e.department_id IS NOT NULL;


10.List the IDs and names of employees who work in the same department as 'John'.

SELECT e.employee_id, e.employee_name
FROM Employees e
INNER JOIN Employees j ON e.department_id = j.department_id
WHERE j.employee_name = 'John';


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


new table for below questions 


-- Create Employees table
CREATE TABLE Emp_1 (
    employee_id INT PRIMARY KEY,
    employee_name VARCHAR(50),
    manager_id INT
);

-- Insert sample data into Employees table
INSERT INTO Emp_1 (employee_id, employee_name, manager_id) VALUES
(1, 'John', NULL),
(2, 'Alice', 1),
(3, 'Bob', 1),
(4, 'Emma', 2),
(5, 'Charlie', 2);



1.Retrieve the names of employees along with the names of their managers.

select e.employee_name as employee_name,
       m.employee_name as manager_name
from emp_1 e
left join emp_1 as m 
on e.manager_id=e.employee_id;

2.List all employees and the names of employees they are managing (as managers).
SELECT m.employee_name AS Manager_Name,
       e.employee_name AS Managed_Employee_Name
FROM Emp_1 m
LEFT JOIN Emp_1 e ON m.employee_id = e.manager_id; (It shows the managed_employee_name from downwards)
+--------------+-----------------------+
| Manager_Name | Managed_Employee_Name |
+--------------+-----------------------+
| John         | Bob                   |
| John         | Alice                 |
| Alice        | Charlie               |
| Alice        | Emma                  |
| Bob          | NULL                  |
| Emma         | NULL                  |
| Charlie      | NULL                  |
+--------------+-----------------------+
7 rows in set (0.00 sec)
3.Display the names of employees who are managed by other employees.
select e.employee_name as managed_employee_name
from emp_1 e
where e.manager_id is not null;

4.Show the names of employees along with the names of their managers, sorted alphabetically by employee name.
select e.employee_name as employee_name,m.employee_name as manager_name
from emp_1 as e left join emp_1 as m
on e.manager_id=m.employee_id
order by e.employee_name asc;

5.Retrieve the names of employees along with the names of their managers, showing NULL for employees who are not managed by anyone.

select e.employee_name as employee_name,m.employee_name as manager_name
from emp_1 as e left join emp_1 as m
on e.manager_id=m.employee_id;



