CREATE TABLE sales (
    sale_id INT PRIMARY KEY,
    salesperson VARCHAR(50),
    region VARCHAR(50),
    sale_amount DECIMAL(10, 2),
    sale_date DATE
);

INSERT INTO sales (sale_id, salesperson, region, sale_amount, sale_date) VALUES
(1, 'Alice', 'North', 1200.50, '2023-01-01'),
(2, 'Bob', 'North', 900.00, '2023-01-03'),
(3, 'Charlie', 'South', 1500.00, '2023-01-05'),
(4, 'David', 'South', 1500.00, '2023-01-07'),
(5, 'Eve', 'East', 700.00, '2023-01-10'),
(6, 'Frank', 'West', 1100.00, '2023-01-12'),
(7, 'Grace', 'West', 900.00, '2023-01-15'),
(8, 'Heidi', 'East', 1200.50, '2023-01-18'),
(9, 'Ivan', 'North', 1500.00, '2023-01-20'),
(10, 'Judy', 'South', 800.00, '2023-01-25');


______________________________________________________________________________


1)Assign a unique sequential integer to each sale record.
alter table sales modify column sale_id int auto_increment;
2)Rank sales within each region by sale amount with gaps in ranking for ties.
SELECT
    region,
    sale_id,
    sale_amount,
    3*RANK() OVER (1*PARTITION BY region 2*ORDER BY sale_amount DESC) AS sales_rank
FROM
    sales;
[Ranked by order by sale_amount]
3)Rank sales within each region by sale amount without gaps in ranking for ties.
SELECT
    region,
    sale_id,
    sale_amount,
    DENSE_RANK() OVER (PARTITION BY region ORDER BY sale_amount DESC) AS sales_rank
FROM
    sales;

4)Assign a sequential integer to salespersons ordered by total sales amount in descending order.
SELECT
    salesperson_id,
    total_sales_amount,
    ROW_NUMBER() OVER (ORDER BY total_sales_amount DESC) AS rank
FROM
    (SELECT
        salesperson_id,
        SUM(sales_amount) AS total_sales_amount
    FROM
        sales_data
    GROUP BY
        salesperson_id) AS sales_totals
ORDER BY
    total_sales_amount DESC;
[to give a temporary name to a table or subquery result set within your query. 
This is especially useful when you need to reference the result of a subquery multiple times or when you want to make your query more readable.]
5)Rank sales by sale amount across all regions, showing ties without gaps.

select region,sale_amount,
dense_rank()over(order by sale_amount desc) as srank
from sales;

6)List sales with their row number.
select 
row_number() over (order by saleID) as row_numm from sales;

7)Rank salespersons by their sale amount within each region.

select region,salesperson,sale_amount,
row_number() over (partition by region order by sale_amount desc) as sales_rank
from sales;

8)Give a dense rank to sales by sale amount within each region.

select region,sale_id,sale_amount,
dense_rank() over (partition by region order by sale_amount desc) as sale_rank from sales;

9)Number the sales by sale amount across all regions.

select region,sale_id,sale_amount,
row_number() over (order by sale_amount desc) as no_of_sales from sales;


10)Rank sales by sale date within each region.
select sale_id,sale_date,region, 
rank() over(partition by region order by sale_date) as num_sales from sales;

11)Give a dense rank to sales by sale date across all regions.
select region,sale_id,sale_date,
dense_rank() over (order by sale_date asc) as dr_sales from sales;


12)List salespersons and their ranks by total sale amount across all regions.
SELECT
    Salesperson,
    SUM(SaleAmount) AS TotalSaleAmount,
    DENSE_RANK() OVER (ORDER BY SUM(SaleAmount) DESC) AS SalespersonRank
FROM
    Sales
GROUP BY
    Salesperson
ORDER BY
    TotalSaleAmount DESC;  -- Optional: Order by TotalSaleAmount for clarity

13)Assign a row number to sales within each salesperson.
select sale_id,salesperson,sale_amount,
row_number() over(partition by salesperson order by sale_id) as yesales from sales;

14)Rank sales by sale amount within each salesperson
select sale_id,salesperson,region,sale_amount,
rank() over (partition by salesperson order by sale_amount desc) as sales_rank_by_amount from sales;